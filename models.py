from typing import List, Optional, Union # Keep Union here for ErrorResponse Pydantic model
from pydantic import BaseModel, Field

# Pydantic models define the expected structure for AI output and API responses

class StepModel(BaseModel):
    """Represents a single step in the lesson's step-by-step guide."""
    stepNumber: int = Field(..., description="The sequential number of the step.")
    title: str = Field(..., description="The concise title displayed in the header of the step.")
    descriptionHtml: str = Field(..., description="Detailed HTML content for the step's explanation, allowing tags like <code>, <strong>, <br>.")

class VisualAidModel(BaseModel):
    """Contains information about any visual aid (image/graph)."""
    imageUrl: Optional[str] = Field(None, description="Placeholder for potential future image URL feature; currently expected to be null.")
    isPresent: bool = Field(False, description="Indicates if a relevant visual (graph/image) was identified for the question in the PDF.")


class LessonDataModel(BaseModel):
    """Represents the complete data structure for a single lesson generated by the AI."""
    # MODIFIED: Changed Union[int, str] to just str for Gemini compatibility
    questionId: str = Field(..., description="Identifier for the question (e.g., '1a', '3') returned as a string. Extracted or inferred.")
    questionText: str = Field(..., description="The exact text of the question being explained.")
    subject: str = Field(..., description="Subject area (e.g., 'Algebra', 'Biology').")
    topic: str = Field(..., description="Specific topic within the subject (e.g., 'Linear Equations').")
    coreConceptHtml: str = Field(..., description="HTML content for the 'Understanding the Concept' section.")
    steps: List[StepModel] = Field(..., description="An ordered list of steps to solve the problem.")
    visualAid: VisualAidModel = Field(..., description="Information about visual aids for the lesson.")
    hints: List[str] = Field(..., description="A list of helpful hint strings (can contain simple HTML like <strong>).")

class LessonResponse(BaseModel):
    """Represents the overall JSON response structure expected from the AI."""
    lessonData: LessonDataModel

class ErrorResponse(BaseModel):
    """Standard error response structure."""
    detail: str